// Se crea una carpeta nueva para el curso accedemos a ella via teminal para inicia

// verificamos que version de nodejs tememos instalada y usamos la version 20.15.0
$ nvm list

// si no la tenemos la instalamos
$ nvm install 20.15.0

// si la tenemos la usamos
$ nvm use 20.15.0

// inicializo mi esquema de trabajo
$ npm init -y

// instalo las dependencias requeridas en el curso
$ npm i express dotenv cors helmet
$ npm i -D typescript @types/node @types/express @types/dotenv @types/cors @types/helmet

// creamos un archivo de configuracion de typescript
npx tsc --init

//---Hasta aqui el commit inicial
//(opcional si tienes una cuenta de github o gitlab para llevar un seguimiento de cambios)
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin \***\*Aqui va la ruta de tu repositorio remoto\*\***
git push -u origin main

//------------- Inicia la Configuración ---------------------
//Aqui se define la arquitectrua MVC con express,
//Se crea la estructura las carpeta donde se almacena los componentes
//Se define el objeto al que se le va a aplicar MVC en el ejercicio: user  
// Modelo de comunicacion MVC aplicado al objeto
// routes -> controller -> services -> repositories
// En los repositories se defines la conexiones a base por medio de algun ORM

//-------------- Se define las entradas -----------------------
//Se crea un archivo main.ts en la raiz de src:
// 1. Se define el listen para el servidor de escucha
// 2. Se define el contructor que carga los metodos: routes, middlewares y config
// 3. Se define el servidor
// 4. Se implemente el denomio que levanta el servicio en package.json con nodemon
$ npm i nodemon
$ npm i ts-node

//-------------- Se define las entradas (variables de entorno)-----------------------
//Se instala otro dependencia
$ npm i envalid
// aqui se usa la libreria dotenv en src/config/server.ts

//--------------- Se configura la seguridad en los middleware ------------------------
// Aqui usamos helmet y cors

//----------------Implemenacion de iterconexion de servicio, controlador y rutas
//Aqui se crean los archivo user.services.ts, user.controller y user.router

//---- Tiempo: 1:17:15 -> Aqui se define los wrappers
// La arquitectura: (-> significa "llama a..")
// controller -> helper -> interface

//---- Tiempo: 1:24:17 -> Aqui se definen wrappers dentro de los catch

//---- Tiempo: 1:28:25 -> Aqui se inicia la separacion de los codigos de error con "enum"
// Se trata a los mensajes como constantes

//---- Tiempo: 1:31:25 -> Aqui se inicia la separacion de los mensajes como constantes
// Se trata a los mensajes como constantes

//---- Tiempo: 1:44:00 -> Aqui se implemente los middlewares con morgan
$ npm i morgan @types/morgan
// se presento la novedad de que no funciona morgan al invocarlo desde el src/main.ts
// Se corrije las ubicacion de las dependencia @types/morgan a "dev" en el package.json
// se elimina la carpeta: node_modules
$ rm -rf node_modules/
// Se vuelve a instalar
$ npm i

//--------------- Clase del 18 de Septiembre ---------------
//Se completa la configuracion del morgan, pero solo funciona cuando el codigo falla Error CODE 404

//Configuacion de ambiente y script de pre-compialacion
//Se realizan configuraciones den el tsconfig.json y el package.json (esta ultima para indica el scricipt para la generacion de los dist)
//Se ejecuta la generacion de los dist con: (hasta el min 17)
$ npm run build
//tambien se crea el START (en package.json) que es un script que me permite levantar la version complila no si antes generar una nueva distro con los ultimos cambios
//"start": "npm run build && node dist/main.js" (hasta el min 22)
$ npm run start

//---------------- Configuracion de seguridades jsonwebtoken-----------------
// Se instala jsonwebtoken
$ npm i jsonwebtoken
$ npm i @type/jsonwebtoken

//------------------Mejoras del validador ------------------------------
//Aqui podemos pedir un minimo de carateres para la clave secreta

//----------------Implemetacion de un jwt que nos autentifica desde otras peticiones (aqui hasta 1:04:35)
//prueba el resultado en: https://jwt.io

//----------------Proteccion de las rutas con middleware --------------
//en el minuto 1:21:42 se hace referencia a la extension Auto Barrel y se lo usa para crear el archivo index en: shared/helpers

//-----------------Pruebas de validacion con token ----------------------
// Aqui se prueba como un si la llamada a la ruta corresponde a una entrada valida por token
//Se realiza una consulta postman para obtener el toke en : localhost:3002/user/login
//Se espera un minuto para que el token expire (dura solo ese tiempo)
//Se realiza una consulta postman para probar el acceso usando el token a: localhost:3002/user  
// se mejora el mensaje en jwt.middleware con un catch y se prueba

//-------------------ajuste del middleware -----------------------
//se mejora la programacion

//-------------------ajuste del midellware 2------------------------
//si viene de la ruta login, que no valide
//No se probo el ejemplo!!

//--------------- Clase del 19 de Septiembre ---------------
//Resumen hasta el minuto 15

//------------------Configuracion de sinonimos de rutas---------------
//Se instala una libreria para manejar rutas relativas
$ npm i tsconfig-paths tslib
//Se hacen ajustes en el tsconfig.json y en el nodemon.json

//-------------------Se cambian las importaciones por los sinonimos------------
//Se hace un ajuste en tsconfig.json
//se instala las librerias tsc-alias
$ npm i -d tsc-alias
//Hasta aqui en el video sigue con problema, en mi codigo esta normal
//se realiza configuraciones que usa el instructor en tsconfig.json
//Linea 14: "target": "es2020",
//Linea 15: "lib":["es2020"],
// TODO OK hasta aqui al correr: $ npm run start

//---------------------Instalacion del TYPEORM------------------
$ npm i typeorm pg //pg es la conexion a postgreSQL

//---------------------Configuracion de la base de datos -----------------
//Se crea el archivo de conexion y lo configura
//desde el minuto 49 inicia la configuracion de DOKER POSTGRESQL,
//se hace un ajuste de dependencias
$ npm i envalid dotenv

//--------------------Creacion de las entidades y ajustes en el uso de la Entidad user------------------------------
//Inicia en min 1:15:00
//Creamos la entidad USER con el archivos ./scr/entities/user.entity.ts
//Debemos instalar reflect-metadata
$ npm i reflect-metadata
//Aqui se presento una novedad en el tipado durante la codificacion del user.entity.ts
//Se soluciono activando los parametro en el tsconfig.json:
"experimentalDecorators": true, /_ Enable experimental support for legacy experimental decorators. _/
"emitDecoratorMetadata": true, /_ Emit design-type metadata for decorated declarations in source files. _/
// e importando usando la entidad en: baseConfig.ts

//-------------------Se agrega una nueva entidad -------------------
//Se agrega la entidad movie
//Use el esquema=> schema: 'security'
//Si no se define el esquema se considerar el esquema Public por defecto

//-------------------------Clase del 21 de Septiembre------------------------
//Configuracion de la conexión a la base de datos: re-definicion de la clase conexion a un objeto estatico

//------------Uso del TypeORM para consultas----------------
//Configuramos el user.respository.ts
//llenamos con datos la tabla usuario
//se consulta por postman min 3:45:29


//---------------Creacion de consulta get -----------------
//Con parametros de busquedas: UsersAll y UsersOne

//----------------Crea una consulta con selector de campos 
//Se puede escoger los campos de la tabla que quiero mostrar


//------------------Ajustes para pagineo en consultas -----------
//Se ajusta la funcion UsersAll para que pueda manejar paguineo